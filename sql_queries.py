# DROP TABLES

songplay_table_drop = "DROP TABLE IF EXISTS songplays"
user_table_drop = "DROP TABLE IF EXISTS users"
song_table_drop = "DROP TABLE IF EXISTS songs"
artist_table_drop = "DROP TABLE IF EXISTS artists"
time_table_drop = "DROP TABLE IF EXISTS time"
song_staging_table_drop = "DROP TABLE IF EXISTS song_staging"
log_staging_table_drop = "DROP TABLE IF EXISTS log_staging"

# CREATE TABLES

song_staging_table_create = ("""
CREATE UNLOGGED TABLE IF NOT EXISTS song_staging (
    num_songs INTEGER NULL,
    artist_id VARCHAR NULL,
    artist_latitude FLOAT NULL,
    artist_longitude FLOAT NULL,
    artist_location VARCHAR NULL,
    artist_name VARCHAR NULL,
    song_id VARCHAR NULL,
    title VARCHAR NULL,
    duration FLOAT NULL,
    year int NULL
);
""")

log_staging_table_create = ("""
CREATE UNLOGGED TABLE IF NOT EXISTS log_staging (
    artist VARCHAR NULL,
    auth VARCHAR NULL,
    firstName VARCHAR NULL,
    gender CHAR(1) NULL,
    itemInSession INTEGER NULL,
    lastName VARCHAR NULL,
    length FLOAT NULL,
    level VARCHAR NULL,
    location VARCHAR NULL,
    method VARCHAR NULL,
    page VARCHAR NULL,
    registration VARCHAR NULL,
    sessionId INTEGER NULL,
    song VARCHAR NULL,
    status INTEGER NULL,
    ts TIMESTAMP NULL,
    userAgent VARCHAR NULL,
    userId INTEGER
);
""")

songplay_table_create = ("""
CREATE TABLE IF NOT EXISTS songplays (
    songplay_id INTEGER GENERATED BY DEFAULT AS IDENTITY,
    start_time TIMESTAMP,	
    user_id INTEGER,	
    level VARCHAR,	
    song_id VARCHAR,	
    artist_id VARCHAR,	
    session_id integer,	
    location VARCHAR,	
    user_agent VARCHAR,	
    PRIMARY KEY(songplay_id)
);
""")

user_table_create = ("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER,	
    first_name VARCHAR,	
    last_name VARCHAR,	
    gender CHAR(1),	
    level VARCHAR,	
    PRIMARY KEY(user_id)
);
""")

song_table_create = ("""
CREATE TABLE IF NOT EXISTS songs (
    song_id VARCHAR,	
    title  VARCHAR,	
    artist_id VARCHAR,	
    year INTEGER,	
    duration FLOAT,	
    PRIMARY KEY(song_id)
);
""")

artist_table_create = ("""
CREATE TABLE IF NOT EXISTS artists (
    artist_id VARCHAR,	
    name VARCHAR,	
    location VARCHAR,	
    latitude FLOAT,	
    longitude FLOAT,
    PRIMARY KEY(artist_id)
);
""")

time_table_create = ("""
CREATE TABLE IF NOT EXISTS time (
    start_time TIMESTAMP,	
    hour INTEGER,	
    day INTEGER,	
    week INTEGER,	
    month INTEGER,	
    year INTEGER,	
    weekday INTEGER,	
    PRIMARY KEY(start_time)
);
""")



# INSERT RECORDS

songplay_table_insert = ("""
INSERT INTO songplays (start_time, user_id, level, song_id, artist_id, session_id, location, user_agent)
SELECT st.ts, st.userid, st.level, s.song_id, a.artist_id, st.sessionid, st.location, st.userAgent FROM log_staging st 
JOIN artists a ON st.artist = a.Name 
JOIN songs s ON st.song = s.title;
""")

user_table_insert = ("""
INSERT INTO users (user_id, first_name, last_name, gender, level)
SELECT userId, firstName, lastName, gender, level FROM log_staging 
ON CONFLICT DO NOTHING;
""")

song_table_insert = ("""
INSERT INTO songs  (song_id, title, artist_id, year, duration)
SELECT song_id, title, artist_id, year, duration FROM song_staging 
ON CONFLICT DO NOTHING;
""")

artist_table_insert = ("""
INSERT INTO artists (artist_id, name, location, latitude, longitude)
SELECT artist_id, artist_name, artist_location, artist_latitude, artist_longitude FROM song_staging 
ON CONFLICT DO NOTHING;
""")

time_table_insert = ("""
INSERT INTO time (start_time, hour, day, week, month, year, weekday)
VALUES (%s, %s, %s, %s, %s, %s, %s) ON CONFLICT DO NOTHING;
""")

create_table_queries = [songplay_table_create, user_table_create, song_table_create, artist_table_create, time_table_create, song_staging_table_create,log_staging_table_create]
drop_table_queries = [songplay_table_drop, user_table_drop, song_table_drop, artist_table_drop, time_table_drop, song_staging_table_drop,log_staging_table_drop]